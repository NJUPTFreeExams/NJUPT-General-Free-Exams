---
import type { Props } from "@astrojs/starlight/props";
import "@astrojs/starlight/style/markdown.css";
import * as fs from "node:fs";
import * as path from "node:path";

const { entry } = Astro.props;
const course = entry.data.title;

function getAllFilesInFolder(folderPath: string): string[] {
	const filesList: string[] = [];

	function traverseDirectory(currentPath: string) {
		const files = fs.readdirSync(currentPath);
		for (const file of files) {
			const filePath = path.join(currentPath, file);
			if (fs.statSync(filePath).isDirectory()) {
				traverseDirectory(filePath); // Recursive call for subdirectories
			} else {
				filesList.push(filePath);
			}
		}
	}
	traverseDirectory(folderPath);
	return filesList;
}

function splitString(str: string): string[] {
	const slashIndex = str.indexOf("/", 1);
	if (slashIndex === -1) return [str];
	return [str.slice(1, slashIndex), str.slice(slashIndex + 1)];
}

const filteredList: string[] = getAllFilesInFolder("./public/")
	.filter((item) => item.includes(course))
	.map((item) => item.replace(/\\/g, "/").substring(6));

const filesByFolder: Record<string, string[]> = {};
filteredList.map((post: string) => {
	const folders: string[] = splitString(post.slice(1, post.lastIndexOf("/")));
	const fileName: string = post.slice(post.lastIndexOf("/") + 1);
	const subFolder: string =
		folders.length > 0 ? folders[folders.length - 1] : "";
	if (!filesByFolder[subFolder]) {
		filesByFolder[subFolder] = [];
	}
	filesByFolder[subFolder].push(fileName);
	return null;
});
---

<div class="sl-markdown-content"><slot /></div>

{Object.entries(filesByFolder).map(([folderName, files]) => (
    <div class="sl-markdown-content" id={folderName}>
        <h5>{folderName}</h5>
        {files.map((fileName) => (
          <a id={fileName} href={`/${course === folderName ? folderName : `${course}/${folderName}`}/${fileName}`} target="_blank">
        {fileName}
    </a><br />
        ))}
    </div>
))
}

